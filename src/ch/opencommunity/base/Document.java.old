package ch.opencommunity.base;

import ch.opencommunity.server.OpenCommunityServer;
import ch.opencommunity.common.OpenCommunityUserSession;
import ch.opencommunity.base.DocumentHeaderFooter.HeaderFooterType;
import ch.opencommunity.base.ScriptDefinition;

import ch.opencommunity.util.TextComponents;

import org.kubiki.base.BasicClass;
import org.kubiki.base.ObjectCollection;
import org.kubiki.base.ActionResult;
import org.kubiki.application.ApplicationContext;
import org.kubiki.xml.XMLParser;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.math.BigInteger;
import java.util.Random;
import java.util.Hashtable;
import java.util.Map;
import java.util.Vector;

import java.io.PrintWriter;
import java.io.IOException;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.commons.lang3.ArrayUtils;


public class Document extends BasicDocument{

	public enum DocumentFormat { PDF, MSWORD }
	private DocumentFormat documentFormat = DocumentFormat.MSWORD;
	private int maxParagraphIndex;
	
	private String tempID;
	
	Parameter reference = null;
	
	public Document(){
		setTablename("Document");
		
		addProperty("Type", "Integer", "1", false, "Typ"); //1=Word, 2=Pdf
		addProperty("MainRecipient","Integer","0", true, "Hauptempfänger");	
		addProperty("SignedBy","Integer","-1", true, "Visiert durch");				
		addProperty("MailingList","String","", true, "Verteiler", 300);
		addProperty("Header", "Integer", "", true, "Kopfzeilen");
		addProperty("Footer", "Integer", "", true, "Fusszeilen");
		addProperty("Subject","String","", false, "Betreffzeile", 200);
		addProperty("DocumentClass","String","", true, "Dokumentenklasse", 200);
		// temporary place for storing modules before Word file has been generated
		addProperty("WordModules", "Text", "", true, ""); 
		
		addProperty("Recipient", "Integer", "", true, "Empfänger");
	
	}
	public void initObjectLocal(){
		super.initObjectLocal();
		OpenCommunityServer ods = (OpenCommunityServer)getRoot();

		ods.logAccess("Format: " + documentFormat);
		


		DocumentTemplate dt = ods.getDocumentTemplate(getID("Template"));

		if(dt != null){
			setProperty("Template", dt);
		}
		/*
		updateContextMenu();

		try{
			getProperty("Status").setSelection(ods.getCode("Dokumentstatus").getCodeList());
			getProperty("Status").setEditable(true);
		}
		catch(Exception e){
			ods.writeError(e);
		}
		addProperty("MailingList2","List","", false, "Verteiler");
		
		getObjectCollection("Paragraph").sort("SortOrder");
		getObjectCollection("CaseStatus").sort("name", "Integer", true);

		script = (ScriptDefinition)ods.getObjectByName("ScriptDefinition", "1");
		*/
	}
	
	public void fillFromTemplate(DocumentTemplate template, String[] templateModuleNames, OpenCommunityUserSession userSession) {
		OpenCommunityServer ods = (OpenCommunityServer)getRoot();
		
		StringBuilder wordModules = new StringBuilder();

		int sortOrder = 0;
		for (String templateModuleName : templateModuleNames) {
			if (templateModuleName.contains("/Note:")) {
				BasicClass bc = ods.getObjectByPath(templateModuleName);
				if (bc instanceof Note) {
					if (documentFormat == DocumentFormat.MSWORD) {
						wordModules.append(bc.getPath());
						wordModules.append("\n");
					}
					else {
						Note note = (Note)bc;
						Paragraph par = addParagraph();
						par.getProperty("SortOrder").setValue(sortOrder++);
						par.fillContent(note.getTitle(), note.getString("Content"));
					}
				}
			}
			else {
				DocumentTemplateModule templateModule = (DocumentTemplateModule)template.getObjectByName("DocumentTemplateModule", templateModuleName);
				
				//DocumentTemplateModule templateModule = (DocumentTemplateModule)templateModules.getObject(templateModuleName);
				if (templateModule != null) {
					if (documentFormat == DocumentFormat.MSWORD) {
						wordModules.append(templateModule.getPath());
						wordModules.append("\n");
					}
					else {
						Paragraph par = addParagraph();
						par.getProperty("SortOrder").setValue(sortOrder++);
						par.getProperty("ShowTitle").setValue(templateModule.getBoolean("ShowTitle"));
						String content = templateModule.getContent();
						par.fillContent(templateModule.getTitle(), content);
					}
				}
			}
		}
		
		if (documentFormat == DocumentFormat.MSWORD) {
			getProperty("WordModules").setValue(wordModules.toString());
			ods.updateObject(this);
		}
	}
	public ActionResult onAction(BasicClass source, String command, ApplicationContext context) {
		return null;
	}
	public boolean onWordClientAction(String action, HttpServletRequest request, HttpServletResponse response, OpenCommunityUserSession userSession) throws IOException {
		OpenCommunityServer ods = (OpenCommunityServer)getRoot();
		ods.logAccess("Wordaction : " + action);
		boolean isHandled = false;
		if (action.equals("getHeader") || action.equals("getFooter")) {
			DocumentTemplate template = getTemplate();
			ods.logAccess("Template : " + template);
			if (template != null) {
				DocumentHeaderFooter headerFooter = null;
				if (action.equals("getHeader")) {
					headerFooter = template.getHeaderFooter(HeaderFooterType.HEADER);
					ods.logAccess("HeaderFooter : " + headerFooter);
				}
				else {
					headerFooter = template.getHeaderFooter(HeaderFooterType.FOOTER);
				}
				if (headerFooter != null) {
					headerFooter.sendContentToWord(response);
					isHandled = true;
				}
			}
		}
		else if (action.equals("getTemplateModules")) {
			PrintWriter writer = response.getWriter();
			
			Object object = getObject("Template");
			if (object instanceof DocumentTemplate){
			    DocumentTemplate template = (DocumentTemplate)object;
				ObjectCollection oc = template.getObjectCollection("DocumentTemplateModule");
				if (oc != null) {
					Vector<BasicClass> modules = oc.getObjects();
					for(BasicClass bcModule : modules) {
						DocumentTemplateModule module = (DocumentTemplateModule)bcModule;
						writer.print(module.getPath() + "@" + module.getTitle() + "\n");
					}
				}
			}
			/*
			CaseRecord caseRecord = (CaseRecord)getParent("org.opendossier.dossier.CaseRecord");
			if (caseRecord != null) {
				List<Note> notes = caseRecord.getAllNotes();
				for (Note note : notes) {
					writer.print(note.getPath() + "@" + note.getParent().getLabel() + " - " + note.getLabel() + "\n");
				}
				Dossier dossier = (Dossier)caseRecord.getParent(); //AK 08.07.2013
				if (dossier != null) {
					notes = dossier.getAllNotes();
					for (Note note : notes) {
						writer.print(note.getPath() + "@" + note.getParent().getLabel() + " - " + note.getLabel() + "\n");
					}
				}
			}
			*/
			isHandled = true;
		}
		else if (action.equals("getModules")) {
			PrintWriter writer = response.getWriter();
			writer.print(getString("WordModules"));
			isHandled = true;
		}
		else if (action.equals("getMailinglist")) {
			PrintWriter writer = response.getWriter();
					
			
			//Vector<DocumentAddress> documentAddresses = getAddressList();
			try{
				OrganisationMember om = null;
				if(getParent() instanceof OrganisationMember){
					om = (OrganisationMember)getParent();	
				}
				else{
					om = (OrganisationMember)ods.getObject(null, "OrganisationMember", "ID", getString("Recipient"));
					om.setParent(this);
					om.initObjectLocal();
				}
				writer.print("<Mailinglist>\n");
				if(om != null){
					Person person = om.getPerson();
					Identity identity = person.getIdentity();
					Address address = person.getAddress();
				//for (DocumentAddress address : documentAddresses) {
					writer.print("<Address");
					/*
					if (address.title != null) writer.print(" title=\"" + XMLParser.escapeXml() + "\"");
					if (address.longTitle != null) writer.print(" longTitle=\"" +  XMLParser.escapeXml() + "\"");
					if (address.function != null) writer.print(" function=\"" +  XMLParser.escapeXml() + "\"");
					if (address.organisation != null) writer.print(" organisation=\"" +  XMLParser.escapeXml() + "\"");
					if (address.firstName != null) writer.print(" firstName=\"" +  XMLParser.escapeXml(identity.getString("FirstName")) + "\"");
					if (address.familyName != null) writer.print(" familyName=\"" +  XMLParser.escapeXml(identity.getString("FirstName")) + "\"");
					if (address.additionalLine != null) writer.print(" additionalLine=\"" +  XMLParser.escapeXml() + "\"");
					if (address.street != null) writer.print(" street=\"" +  XMLParser.escapeXml(address.getString("Street")) + "\"");
					if (address.number != null) writer.print(" number=\"" +  XMLParser.escapeXml(address.getString("Number")) + "\"");
					if (address.zipcode != null) writer.print(" zipcode=\"" +  XMLParser.escapeXml(address.getString("Zipcode")) + "\"");
					if (address.city != null) writer.print(" city=\"" +  XMLParser.escapeXml(address.getString("City")) + "\"");
					*/
					writer.print(" title=\"" + XMLParser.escapeXml("") + "\"");
					writer.print(" longTitle=\"" +  XMLParser.escapeXml(om.getAddressation()) + "\"");
					writer.print(" function=\"" +  XMLParser.escapeXml("") + "\"");
					writer.print(" organisation=\"" +  XMLParser.escapeXml("") + "\"");
					writer.print(" firstName=\"" +  XMLParser.escapeXml(identity.getString("FirstName")) + "\"");
					writer.print(" familyName=\"" +  XMLParser.escapeXml(identity.getString("FamilyName")) + "\"");
					writer.print(" additionalLine=\"" +  XMLParser.escapeXml("") + "\"");
					writer.print(" street=\"" +  XMLParser.escapeXml(address.getString("Street")) + "\"");
					writer.print(" number=\"" +  XMLParser.escapeXml(address.getString("Number")) + "\"");
					writer.print(" zipcode=\"" +  XMLParser.escapeXml(address.getString("Zipcode")) + "\"");
					writer.print(" city=\"" +  XMLParser.escapeXml(address.getString("City")) + "\"");
					
					writer.print(">\n");
					writer.print("</Address>\n");
				//}
				}
				writer.print("</Mailinglist>\n");
			}
			catch(java.lang.Exception e){
				ods.logException(e);
			}
			isHandled = true;
		}
		else if (action.equals("getReplaceMap")) {

			PrintWriter writer = response.getWriter();
			Map<String, String> replaceMap = getAttributes(userSession);
			for (String key : replaceMap.keySet()) {
				String value = "";
				if (key.startsWith("script_")) {
					
					try {
						value = (String)ods.executeScript(replaceMap.get(key), this, null, userSession);
					}
					catch (Exception e) {
//							ods.logException(e);
						value = "Ungültiges Script";
					}
					
				}
				else {
					value = replaceMap.get(key);
				}
				// remove HTML tags

				value = value.replaceAll("^\\s*<p>(\n\t)?", "");
				value = value.replaceAll("</p>\\s*$", "");
				value = value.replaceAll("</p>\\s*<p>(\n\t)?", "\n");
				value = value.replaceAll("<br />(\n\t)?", "\n");
				value = StringEscapeUtils.unescapeHtml4(value);
				//value = encode(StringEscapeUtils.unescapeHtml4(value)); //ToDo: Komplette URL-Codierung der Feldinhalte
				
				value = value.replace("\n", "\\n");
				writer.print(key + "=>" + value + "\n");
			}
			isHandled = true;
		}
		if (!isHandled) {
			isHandled = super.onWordClientAction(action, request, response, userSession);
		}
		return isHandled;
	}
	public Map<String, String> getAttributes(OpenCommunityUserSession userSession){
		OpenCommunityServer ods = (OpenCommunityServer)getRoot();
		Hashtable<String, String> attrs = new Hashtable<String, String>();
		for (ScriptDefinition script : ods.getScripts().values()) {
			if (script.isDocumentScript()) {
				attrs.put("script_" + TextComponents.cleanParameterName(script.getTitle()), script.getString("ScriptBody"));
			}
		}
		if(getParent() instanceof OrganisationMember){
			OrganisationMember om = (OrganisationMember)getParent();
			if(getReference() != null){
				Activity activity = (Activity)getReference().getParent();
				attrs.put("betreff", activity.getString("Title"));
			}
		}
		return attrs;
	}
	public Paragraph addParagraph() {
		return addParagraph(Integer.toString(maxParagraphIndex++));
	}
	
	public Paragraph addParagraph(String id) {
		Paragraph paragraph = new Paragraph(id);
		addParagraph(paragraph);
		return paragraph;
	}
	
	public void addParagraph(Paragraph paragraph) {
		addSubobject(paragraph.getId(), "Paragraph", paragraph);
		paragraph.setParent(this);
	}
	public String getDocPostfix(DocumentFormat documentFormat) {
		return documentFormat == DocumentFormat.MSWORD ? ".docx" : ".pdf";
	}
	
	public String getDocPostfix() {
		return getDocPostfix(documentFormat);
	}
	public String getTempName() {
		return getTempName(getTempPrefix());
	}
	public String getTempName(String prefix) {
		if (tempID == null) {
			tempID = new BigInteger(50, new Random()).toString();
		}
		return "od_" + prefix + "_" + tempID;
	}
	protected String getTempPrefix() {
		return "doc";
	}
	protected DocumentTemplate getTemplate() {
		if (getObject("Template") instanceof DocumentTemplate){
			return (DocumentTemplate)getObject("Template");
		}
		else {
			return null;
		}
	}
	@Override
	public void setIsExternal(boolean isExternal) {
	}
	@Override
	public boolean isExternal() {
		return true;
	}
	protected String getDocPath(boolean filesystem){
		return ((OpenCommunityServer)getRoot()).getRootpath() + "/docs/";
	}
	protected String getDocPath(boolean filesystem, DocumentFormat documentFormat){
		return ((OpenCommunityServer)getRoot()).getRootpath() + "/docs/";	
	}
	public void setReference(Parameter reference){
		this.reference = reference;
	}
	public Parameter getReference(){
		return reference;
	}
		
}
